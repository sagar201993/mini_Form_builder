import { createApi } from "@reduxjs/toolkit/query/react";
import { baseQuery } from "./baseApi";

// Define an API service for authentication using RTK Query
export const authApi = createApi({
  reducerPath: "authApi", // Unique key for the API slice in the Redux store
  baseQuery, // Custom base query (usually includes base URL, error handling, headers, etc.)

  endpoints: (builder) => ({
    // REGISTER: Creates a new user
    register: builder.mutation<
      { token: string; user: { name: string; email: string } }, // Response type
      { name: string; email: string; password: string } // Request body type
    >({
      query: (credentials) => ({
        url: "/auth/register",
        method: "POST",
        body: credentials,
      }),
    }),

    // LOGIN: Authenticates user and returns token
    login: builder.mutation<
      { token: string; user: { name: string; email: string } },
      { email: string; password: string }
    >({
      query: (credentials) => ({
        url: "/auth/login",
        method: "POST",
        body: credentials,
      }),
    }),

    // LOGOUT: Logs out the user from the session
    logout: builder.mutation<void, void>({
      query: () => ({
        url: "/auth/logout",
        method: "POST",
        // Optional: only needed if token isn't automatically injected in `baseQuery`
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
        },
      }),
    }),
  }),
});

// Export hooks auto-generated by RTK Query
export const { useRegisterMutation, useLoginMutation, useLogoutMutation } =
  authApi;
